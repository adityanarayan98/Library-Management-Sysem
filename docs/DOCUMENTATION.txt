# Library Management System - Technical Documentation

## 📋 Table of Contents
1. System Architecture
2. Technology Stack
3. Database Design
4. API Reference
5. Configuration Management
6. Security Implementation
7. Deployment Guide
8. Performance Optimization
9. Monitoring and Logging
10. Maintenance Procedures

## 1. System Architecture

### Overview
The Library Management System is built using a modern web application architecture with clear separation of concerns:

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Web Browser   │    │   Flask Server  │    │   SQLite DB     │
│                 │    │                 │    │                 │
│  - HTML/CSS/JS  │◄──►│  - Routes       │◄──►│  - Users        │
│  - Bootstrap 5  │    │  - Templates    │    │  - Patrons      │
│  - AJAX Calls   │    │  - Business     │    │  - Books        │
│                 │    │    Logic        │    │  - Transactions │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                              │
                              ▼
                       ┌─────────────────┐
                       │   File System   │
                       │                 │
                       │  - Backups      │
                       │  - Static Files │
                       │  - Logs         │
                       └─────────────────┘
```

### Application Structure
```
library_management/
├── app/
│   ├── __init__.py      # Flask application factory
│   ├── auth.py          # Authentication routes
│   ├── database.py      # Database utilities and connection
│   ├── models.py        # SQLAlchemy models (alternative)
│   └── routes.py        # Main application routes
├── templates/           # Jinja2 templates
│   ├── base.html        # Base template with navigation
│   ├── login.html       # Authentication pages
│   ├── dashboard.html   # Main dashboard
│   ├── patrons.html     # Patron management
│   ├── books.html       # Book management
│   ├── backup.html      # Backup and import
│   └── ...              # Other templates
├── instance/            # Database and instance data
│   └── library.db       # SQLite database
├── data/                # Data files (moved to development/data)
├── backups/             # Backup files storage (moved to development/backups)
├── requirements.txt     # Python dependencies
├── run.py              # Application entry point
└── readme.txt          # This documentation
```

## 2. Technology Stack

### Backend Technologies
- **Python 3.7+**: Core programming language
- **Flask**: Micro web framework
- **SQLite**: Lightweight relational database
- **SQLAlchemy**: Database ORM (alternative implementation)
- **Flask-Login**: User session management
- **Flask-WTF**: Form handling and validation
- **Werkzeug**: Password hashing and security

### Frontend Technologies
- **HTML5**: Semantic markup
- **CSS3**: Modern styling with custom properties
- **Bootstrap 5**: Responsive CSS framework
- **Bootstrap Icons**: Icon library
- **jQuery**: JavaScript library for AJAX
- **JavaScript ES6+**: Modern JavaScript features

### Development Tools
- **Visual Studio Code**: Primary IDE
- **Git**: Version control
- **Python Virtual Environment**: Dependency management

## 3. Database Design

### Core Tables

#### Users Table
```sql
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    role TEXT NOT NULL DEFAULT 'librarian',
    is_active BOOLEAN DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Patrons Table
```sql
CREATE TABLE patrons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    roll_no TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    patron_type TEXT NOT NULL,
    department TEXT,
    division TEXT,
    status TEXT DEFAULT 'active',
    max_books INTEGER DEFAULT 3,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Books Table
```sql
CREATE TABLE books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    isbn TEXT,
    publisher TEXT,
    publication_year INTEGER,
    accession_number TEXT UNIQUE NOT NULL,
    category_id INTEGER NOT NULL,
    status TEXT DEFAULT 'available',
    price REAL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories (id)
);
```

#### Transactions Table
```sql
CREATE TABLE transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    patron_id INTEGER NOT NULL,
    book_id INTEGER NOT NULL,
    issue_date DATE NOT NULL,
    due_date DATE NOT NULL,
    return_date DATE,
    status TEXT DEFAULT 'issued',
    fine_amount REAL DEFAULT 0.0,
    fine_paid BOOLEAN DEFAULT 0,
    issued_by INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (patron_id) REFERENCES patrons (id),
    FOREIGN KEY (book_id) REFERENCES books (id),
    FOREIGN KEY (issued_by) REFERENCES users (id)
);
```

### Relationships
- **One-to-Many**: User → Transactions (issued_by)
- **One-to-Many**: Patron → Transactions (patron_id)
- **One-to-Many**: Book → Transactions (book_id)
- **Many-to-One**: Book → Category (category_id)

## 4. API Reference

### Authentication Routes
- `GET/POST /login` - User login
- `GET/POST /create_admin` - Create first admin user
- `GET /logout` - User logout

### Main Application Routes
- `GET/POST /` - Index/redirect to dashboard
- `GET /dashboard` - Main dashboard with statistics
- `GET /patrons` - List all patrons with pagination
- `GET /books` - List all books with search and pagination
- `GET /reports` - Reports and analytics
- `GET/POST /backup` - Backup and import operations

### CRUD Operations
- `GET/POST /patrons/add` - Add new patron
- `GET/POST /books/add` - Add new book
- `GET/POST /issue` - Issue book to patron
- `GET/POST /return` - Return book from patron

## 5. Configuration Management

### Library Settings
The system uses a flexible settings system stored in the database:

#### Available Settings
- `fine_per_day`: Daily fine amount for overdue books
- `student_due_days`: Default due period for students
- `faculty_due_days`: Default due period for faculty
- `staff_due_days`: Default due period for staff
- `student_max_books`: Maximum books for students
- `faculty_max_books`: Maximum books for faculty
- `staff_max_books`: Maximum books for staff
- `library_name`: Display name of the library
- `librarian_email`: Contact email for the library

### Setting Management
```python
# Get a setting
fine_rate = LibrarySettings.get_setting('fine_per_day', 1.0)

# Set a setting
LibrarySettings.set_setting('fine_per_day', 2.0, 'Updated fine rate')
```

## 6. Security Implementation

### Authentication Security
- **Password Hashing**: Uses Werkzeug's security functions
- **Session Management**: Flask-Login handles user sessions
- **CSRF Protection**: Flask-WTF provides CSRF tokens
- **Role-Based Access**: Different permissions for admin/librarian

### Data Validation
- **Input Sanitization**: All user inputs are validated
- **SQL Injection Prevention**: Parameterized queries
- **XSS Protection**: HTML escaping in templates
- **File Upload Security**: Restricted file types and sizes

### Security Best Practices
- Secure password requirements
- Session timeout handling
- Secure headers implementation
- Regular security updates

## 7. Deployment Guide

### Development Deployment
```bash
# 1. Install dependencies
pip install -r requirements.txt

# 2. Set up environment variables (optional)
# Create .env file with SECRET_KEY

# 3. Run the application
python run.py

# 4. Access at http://127.0.0.1:5000
```

### Production Deployment
```bash
# 1. Install production dependencies
pip install -r requirements-prod.txt

# 2. Set up production environment
export FLASK_ENV=production
export SECRET_KEY=your-secret-key

# 3. Use production WSGI server
gunicorn --config gunicorn.conf.py run:app

# 4. Set up reverse proxy (nginx)
# Configure nginx.conf for production
```

### Docker Deployment (Optional)
```bash
# Build the Docker image
docker build -t library-management .

# Run the container
docker run -p 5000:5000 -v library_data:/app/instance library-management
```

## 8. Performance Optimization

### Database Optimization
- **Indexing**: Proper indexes on frequently queried columns
- **Query Optimization**: Efficient SQL queries with JOINs
- **Connection Pooling**: Reuse database connections
- **Caching**: Implement Redis caching for frequently accessed data

### Frontend Optimization
- **CSS/JS Minification**: Reduce file sizes
- **Image Optimization**: Compress and optimize images
- **Browser Caching**: Set appropriate cache headers
- **CDN Usage**: Serve static files from CDN

### Application Optimization
- **Pagination**: Limit records per page
- **Lazy Loading**: Load data on demand
- **Background Tasks**: Use Celery for long-running tasks
- **Database Backups**: Automated backup scheduling

## 9. Monitoring and Logging

### Logging Implementation
```python
import logging

# Configure logging
logging.basicConfig(
    filename='library.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Log events
logger = logging.getLogger(__name__)
logger.info(f'Book {book_id} issued to patron {patron_id}')
```

### Monitoring Metrics
- **System Health**: Database connectivity, disk space
- **Performance Metrics**: Response times, error rates
- **User Activity**: Login/logout, transactions
- **Data Growth**: Database size, record counts

### Alert System
- Email notifications for critical errors
- Dashboard alerts for overdue books
- System health monitoring
- Automated backup status reports

## 10. Maintenance Procedures

### Regular Maintenance Tasks

#### Daily Tasks
- Review overdue books and send notifications
- Check system logs for errors
- Verify backup creation
- Monitor disk space usage

#### Weekly Tasks
- Review user access logs
- Check system performance metrics
- Update security patches
- Verify data integrity

#### Monthly Tasks
- Create full system backup
- Review and optimize database queries
- Update dependencies
- Generate comprehensive reports

### Backup Procedures
```bash
# Automated backup script
#!/bin/bash
BACKUP_DIR="backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Create backup directory
mkdir -p $BACKUP_DIR

# Backup database
cp instance/library.db $BACKUP_DIR/library_backup_$TIMESTAMP.db

# Create CSV exports
python -c "from app.routes import export_table; export_table('patrons')"
python -c "from app.routes import export_table; export_table('books')"
python -c "from app.routes import export_table; export_table('transactions')"
```

### Recovery Procedures
1. **Database Recovery**: Restore from backup file
2. **Data Migration**: Import CSV files using web interface
3. **System Recovery**: Reinstall application and restore data
4. **User Recovery**: Reset passwords and recreate accounts

## Code Quality Standards

### Python Code Style
- Follow PEP 8 guidelines
- Use meaningful variable names
- Add docstrings to functions and classes
- Implement proper error handling

### HTML/CSS Standards
- Semantic HTML5 markup
- Responsive design principles
- Consistent naming conventions
- Optimized for performance

### JavaScript Best Practices
- Use modern ES6+ features
- Implement proper error handling
- Follow security best practices
- Optimize for performance

## API Documentation

### REST Endpoints

#### Authentication
- `POST /login` - User authentication
- `POST /logout` - User logout
- `POST /create_admin` - Create admin user

#### Patrons
- `GET /patrons` - List patrons with pagination
- `POST /patrons/add` - Create new patron
- `GET /patrons/search` - Search patrons

#### Books
- `GET /books` - List books with search and pagination
- `POST /books/add` - Add new book
- `GET /books/<id>` - Get book details

#### Transactions
- `POST /issue` - Issue book to patron
- `POST /return` - Return book from patron
- `GET /transactions` - List transactions

## Troubleshooting Guide

### Common Issues and Solutions

#### Database Connection Issues
```python
# Check database file exists and is accessible
import os
db_path = 'instance/library.db'
if not os.path.exists(db_path):
    print("Database file not found")
```

#### Template Errors
- Verify all template files exist
- Check for syntax errors in HTML/Jinja2
- Ensure proper block structure

#### Import/Export Issues
- Verify CSV file format
- Check file encoding (UTF-8)
- Validate required columns

#### Performance Issues
- Check database query performance
- Monitor memory usage
- Review system logs

## Contributing Guidelines

### Development Workflow
1. Create feature branch from main
2. Implement changes with tests
3. Submit pull request for review
4. Merge after approval

### Code Review Checklist
- [ ] Code follows PEP 8 style
- [ ] Functions have docstrings
- [ ] Error handling implemented
- [ ] Security considerations addressed
- [ ] Tests pass
- [ ] Documentation updated

## License and Credits

### Open Source Components
- Flask: BSD License
- Bootstrap: MIT License
- SQLite: Public Domain
- jQuery: MIT License

### Development Credits
- **System Design**: Aditya Narayan Sahoo
- **Development**: Aditya Narayan Sahoo
- **Testing**: Library Staff
- **Documentation**: Aditya Narayan Sahoo

---

*This technical documentation provides comprehensive information about the Library Management System architecture, implementation, and maintenance procedures.*
