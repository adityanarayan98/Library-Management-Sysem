# GitHub Repository Upload Guide - Library Management System

## Step 1: Set Up Git and GitHub

### 1.1 Install Git (if not already installed)
```bash
# Check if Git is installed
git --version

# If not installed, download from: https://git-scm.com/downloads
```

### 1.2 Create a GitHub Account
1. Go to https://github.com
2. Sign up for a free account
3. Verify your email address

### 1.3 Create a New Repository on GitHub
1. Click the "+" button in the top right corner
2. Select "New repository"
3. Repository name: `library-management-system` or `iitgn-library`
4. Description: "Library Management System built with Flask and SQLite"
5. Choose Public or Private (Public is fine for this project)
6. **DO NOT** initialize with README, .gitignore, or license (you'll add your own)
7. Click "Create repository"

## Step 2: Prepare Your Project Files

### 2.1 Essential Files to Include
```
✅ library_management/          # Main Flask application
✅ requirements.txt             # Python dependencies
✅ start_server.py             # Server startup script
✅ add_sample_data.py          # Sample data script
✅ check_databases.py          # Database checking utility
✅ create_user.py              # User creation utilities
✅ fix_user_role.py            # User role management
✅ *.bat files                 # Windows batch files
✅ Readme.md                   # Project documentation
✅ USER_GUIDE.txt              # User guide
✅ DOCUMENTATION.txt           # Technical documentation
✅ INSTALLATION_PLAN.txt       # Installation instructions
```

### 2.2 Files/Directories to EXCLUDE (add to .gitignore)
```
❌ __pycache__/                # Python cache files
❌ *.pyc                        # Compiled Python files
❌ .env                         # Environment variables (contains secrets)
❌ instance/library.db          # Database file (contains user data)
❌ library_management/instance/library.db  # Database file
❌ development/backups/         # Backup files (can be regenerated)
❌ .git/                        # Git metadata (will be created)
❌ .vscode/                     # IDE settings (personal)
❌ *.log                        # Log files
❌ .DS_Store                    # macOS system files
❌ Thumbs.db                    # Windows system files
```

### 2.3 Create .gitignore File
Create a file named `.gitignore` in your project root:

```
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Flask
instance/
.webassets-cache

# Environment variables
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
*.log

# Backups (optional - you might want to keep these)
backups/

# Database files (IMPORTANT - keep user data private)
*.db
```

## Step 3: Initialize Git and Upload to GitHub

### 3.1 Initialize Git Repository
```bash
# Navigate to your project directory
cd "c:\Users\iitgn\OneDrive - iitgn.ac.in\Project\Own 2.0"

# Initialize Git repository
git init

# Add all files to staging
git add .

# Create initial commit
git commit -m "Initial commit: Library Management System v1.0"
```

### 3.2 Connect to GitHub Repository
```bash
# Add remote origin (replace with your actual GitHub username and repo name)
git remote add origin https://github.com/YOUR_USERNAME/library-management-system.git

# Rename the default branch to main (optional, but recommended)
git branch -M main

# Push to GitHub
git push -u origin main
```

### 3.3 Verify Upload
1. Go to your GitHub repository in the browser
2. You should see all your project files
3. The repository should show your commit message

## Step 4: Create a Proper README.md

Update your README.md with:

```markdown
#  Library Management System

A comprehensive library management system built with Flask, SQLite, and modern web technologies.

## Features

- User authentication and role management
- Book catalog management
- Patron management
- Book issue/return system
- Backup and restore functionality
- Responsive web interface
- Database management tools

## Quick Start

### Option 1: Quick Start (Automated Setup)
```bash
# Double-click this file on Windows
quick_start.bat
```

### Option 2: Manual Setup
```bash
# Install dependencies
pip install -r library_management/requirements.txt

# Add sample data
python add_sample_data.py

# Start the server
python start_server.py start
```

## Access Information

- **Main Site**: http://localhost:5000
- **Dashboard**: http://localhost:5000/dashboard
- **Login**: http://localhost:5000/login

### Default Admin Credentials
- Username: `admin`
- Password: `admin123`

## Project Structure

```
├── library_management/     # Main Flask application
│   ├── app/               # Application modules
│   ├── templates/         # HTML templates
│   ├── instance/          # Database and config files
│   └── requirements.txt   # Python dependencies
├── *.bat                  # Windows batch files
├── *.py                   # Python utility scripts
└── docs/                  # Documentation files
```

## Technologies Used

- **Backend**: Python Flask
- **Database**: SQLite
- **Frontend**: HTML, CSS, JavaScript
- **Authentication**: Flask-Login
- **Forms**: Flask-WTF
- **Data Processing**: Pandas

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## License

This project is for educational purposes at IIT Gandhinagar.

## Support

For issues or questions, please create an issue in the GitHub repository.
```

## Step 5: Post-Upload Steps

### 5.1 Create a .gitattributes file (optional)
```
# Auto detect text files and perform LF normalization
* text=auto

# Python files should use LF
*.py text eol=lf
*.txt text eol=lf
*.md text eol=lf

# Batch files should use CRLF on Windows
*.bat text eol=crlf
```

### 5.2 Push Updates
```bash
# After making changes
git add .
git commit -m "Update: description of changes"
git push
```

### 5.3 Create Releases (Optional)
1. Go to your repository on GitHub
2. Click "Releases" → "Create a new release"
3. Add version tag (e.g., v1.0.0)
4. Add release notes
5. Publish

## Troubleshooting

### Common Issues:

1. **Large file errors**: Make sure database files are in .gitignore
2. **Permission denied**: Check if you're logged into GitHub CLI
3. **Files not showing**: Wait a few minutes for GitHub to process

### Commands to Check Status:
```bash
git status                    # Check what files are staged
git log --oneline            # View commit history
git remote -v                # Check remote repository
```

## Best Practices

1. **Commit often** with meaningful messages
2. **Use branches** for new features
3. **Don't commit sensitive data** (passwords, API keys)
4. **Write good documentation**
5. **Use semantic versioning** (1.0.0, 1.1.0, etc.)

## Getting Help

- GitHub Desktop: GUI alternative to command line
- GitHub CLI: `gh` command for advanced operations
- Git documentation: https://git-scm.com/doc

---

**Note**: Remember to replace `YOUR_USERNAME` with your actual GitHub username in the remote URL.
